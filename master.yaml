AWSTemplateFormatVersion: '2010-09-09'

Description: >

    This template deploys a VPC, with a pair of public and private subnets spread 
    across two Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the private subnets. It adds a APIGateway.

    It then deploys a highly available ECS cluster using an AutoScaling Group, with 
    ECS hosts distributed across multiple Availability Zones. 

    Finally, it deploys a pair of example ECS services from containers published in 
    Amazon EC2 Container Registry (Amazon ECR).

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Transin
      Parameters:
      - LaunchEmpire
      - EmpireVersion
    - Label:
        default: Docker
      Parameters:
      - DockerUser
      - DockerPass
      - DockerEmail
      - DockerRegistry
    ParameterLabels:
      LaunchEmpire:
        default: Launch
      EmpireVersion:
        default: Daemon version
      DockerUser:
        default: kjvenky
      DockerPass:
        default: Lopa123#
      DockerEmail:
        default: kjvenky@gmail.com
      DockerRegistry:
        default: Registry
        
Parameters:
  EmpireVersion:
    Type: String
    Default: master
    Description: Docker tag to specify the version of Empire to run. This can be any
      git branch or sha.
  DockerRegistry:
    Type: String
    Description: The URL of the Docker registry to pull private images from.
    Default: https://index.docker.io/v1/
  DockerUser:
    Type: String
    Description: Username of a Docker registry user to pull images from private repositories.
    Default: ''
  DockerPass:
    Type: String
    Description: Password of a Docker registry user to pull images from private repositories.
    Default: ''
    NoEcho: true
  DockerEmail:
    Type: String
    Description: Email of a Docker registry user to pull images from private repositories.
    Default: ''
  
Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/transin-infra/infrastructure/vpc.yaml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.192.0.0/16
                PublicSubnet1CIDR:  10.192.8.0/21
                PublicSubnet2CIDR:  10.192.16.0/21
                PrivateSubnet1CIDR: 10.192.24.0/21
                PrivateSubnet2CIDR: 10.192.32.0/21

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/transin-infra/infrastructure/security-groups.yaml
            Parameters: 
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/transin-infra/infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

    # APIGateway: 
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/transin-infra/infrastructure/api-gateway.yaml
    #         Parameters:
    #             EnvironmentName: !Ref AWS::StackName
    #             VPC: !GetAtt VPC.Outputs.VPC
    #             Subnets: !GetAtt VPC.Outputs.PublicSubnets

    ECS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/transin-infra/infrastructure/ecs-cluster.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                InstanceType: t2.large
                ClusterSize: 4
                VPC: !GetAtt VPC.Outputs.VPC
                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
