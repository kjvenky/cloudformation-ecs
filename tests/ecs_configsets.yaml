Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: transin-test

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 1

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id
        Default: vpc-31402e55

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>
        Default: subnet-dd97a3b9,subnet-c1712bb7

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id
        Default: sg-998eb9fe
    
    FileSystem:
        Description: Select the EFS file system to use with this ECS
        Type: String
        Default: fs-25b7511c
    
    EfsMountPoint:
        Type: String
        Default: /mnt/efs

Mappings:

    # These are the latest ECS optimized AMIs as of February 2017:
    #
    #   amzn-ami-2016.09.f-amazon-ecs-optimized
    #   ECS agent:    1.14.0
    #   Docker:       1.12.6
    #   ecs-init:     1.14.0-2
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-b2df2ca4
        us-east-2:
            AMI: ami-832b0ee6
        us-west-1:
            AMI: ami-dd104dbd
        us-west-2:
            AMI: ami-022b9262
        eu-west-1:
            AMI: ami-a7f2acc1
        eu-west-2:
            AMI: ami-3fb6bc5b
        eu-central-1:
            AMI: ami-ec2be583
        ap-northeast-1:
            AMI: ami-c393d6a4
        ap-southeast-1:
            AMI: ami-a88530cb
        ap-southeast-2:
            AMI: ami-8af8ffe9
        ca-central-1:
            AMI: ami-ead5688e

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName
                            
    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole
    
    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true
        
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups: 
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash -xe
                    yum update -y
                    yum install -y aws-cfn-bootstrap cloud-init aws-cli
                    /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} --configsets ec2_setup
                    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

                                                                      
    #     Metadata:
    #         AWS::CloudFormation::Init:
    #             configSets :
    #                 ec2_setup:
    #                     - config_cfn
    #                     - install_packages
    #                     # - setup_uploads_efs
    #                     # - docker_restart
    #             config_cnf:
    #                 commands:
    #                     01_add_instance_to_cluster:
    #                         command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
    #                 files:
    #                     "/etc/cfn/cfn-hup.conf":
    #                         mode: 000400
    #                         owner: root
    #                         group: root
    #                         content: !Sub |
    #                             [main]
    #                             stack=${AWS::StackId}
    #                             region=${AWS::Region}
                        
    #                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
    #                         content: !Sub |
    #                             [cfn-auto-reloader-hook]
    #                             triggers=post.update
    #                             path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
    #                             action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

    #                 services: 
    #                     sysvinit:
    #                         cfn-hup: 
    #                             enabled: true
    #                             ensureRunning: true
    #                             files: 
    #                                 - /etc/cfn/cfn-hup.conf
    #                                 - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    #             install_packages:
    #                 commands:
    #                     01_update_yum:
    #                         command: "yum update -y"
    #                     02_install_packages:
    #                         command: "yum install -y aws-cfn-bootstrap jq nfs-utils python27 python27-pip awscli"
    #                     03_install_aws_cli:
    #                         command: "pip install --upgrade awscli"
                # setup_uploads_efs:
                #     commands:
                #         01_make_mount_dir:
                #             command: !Sub "mkdir -p ${EfsMountPoint}"
                #         02_update_fstab:
                #             command: !Sub |
                #                 "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ ${EfsMountPoint} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab"
                #         03_mount_efs:
                #             command: "mount -a -t nfs4 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ ${EfsMountPoint}"
                # docker_restart:
                #     commands:
                #         01_docker_stop:
                #             command:  "docker stop ecs-agent"
                #         02_docker_restart:
                #             command: "/etc/init.d/docker restart"
                #         03_docker_start:
                #             command: "docker start ecs-agent" 
Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

