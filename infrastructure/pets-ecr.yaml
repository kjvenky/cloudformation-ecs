Description: >
    This is an example of a long running ECS service that serves a JSON API of products.

Parameters:

    APIVersion: # Useful for service versioning
        Type: String
        Default: v1

    CompanyName:
        Type: String
        Default: transin
    
    EnvironmentName:
        Type: String
        Default: staging
        AllowedValues:
            - production
            - staging
    
    ServiceName:
        Type: String
        Default: pets

    Version:
        Type: String
        Default: '0.0.1'

    Cluster: # Depends on the company environment
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String
        Default: staging
        AllowedValues:
            - production
            - staging

    # Add the number of dockers you need for this service
    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    Port: 
        Description: Container port to be mapped
        Type: String
        Default: 8080

# Add Conditions based on the environment to deploy

# Donot touch the things below unless necessary and u know what you are doing
Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: !Join ['-',[!Ref ServiceName, 'service']]
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup
            
    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ['-',[!Ref ServiceName,'service']]
            ContainerDefinitions:
                - Name: !Join ['-',[!Ref ServiceName,'service']]
                  Essential: true
                  Image: 
                    Fn::Join:
                    - '/'
                    - - Fn::ImportValue:
                            - !Sub ""${CompanyName}-${EnvironmentName}-ecr-repository"
                      - !Join ['-', [!Ref ServiceName, 'service']]
                  Memory: 64
                  Cpu: 0
                  PortMappings:
                    - ContainerPort: 8080
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: 
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 300
            HealthCheckPath: /ping # Autocontruck health check path name
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: 
                Fn::ImportValue: !Sub "${EnvironmentName}-alb-listener"
            Priority: 7
            Conditions:
                - Field: path-pattern
                  Values: 
                    - Fn::Join: # Auto construct the path name
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole: 
        Type: AWS::IAM::Role
        Properties: 
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies: 
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument: 
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets",
                                    "cloudformation:CreateStack", # Added to launch services as independent stack
                                    "cloudformation:DescribeStacks",
                                    "cloudformation:DescribeStackEvents",
                                    "cloudformation:DescribeStackResources",
                                    "cloudformation:GetTemplate",
                                    "cloudformation:ValidateTemplate" 
                                ],
                                "Resource": "*"
                        }]
                    }
